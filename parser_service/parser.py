import os

from telethon import TelegramClient, errors
from telethon.tl.functions.channels import JoinChannelRequest
from telethon import events
from dotenv import load_dotenv

import telebot
from telebot import types
from .format import format_message
import asyncio
import traceback
from parser_service.gpt import long_message
from parser_service import *
# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ API

load_dotenv()
bot = telebot.TeleBot(TOKEN)
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
client = TelegramClient(session_file, api_id, api_hash)



async def check_new_channels():
    dialogs = await client.get_dialogs()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã
    channels = [dialog for dialog in dialogs if dialog.is_channel]

    ids = []
    for channel in channels:
        ids.append(channel.id)
    #print('ids',ids)
    current_channels = donor_instance.get_donors_for_parser()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã
    #print('current_channels',current_channels)
    for channel in current_channels:
        if channel not in ids:
            print(channel)
            print(donor_instance.get_donor_username(channel))
            username = 'https://t.me/'+donor_instance.get_donor_username(channel)
            try:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
                await client(JoinChannelRequest(username))
                print(f"–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {username}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {username}: {e}")

async def refresh_channels():
    while True:
        await check_new_channels()
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

async def main():
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
        await client.start()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        me = await client.get_me()
        if me:
            print(f"–°–µ—Å—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞! –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            client.loop.create_task(refresh_channels())
            #########################
            @client.on(events.NewMessage)
            async def handler_new_message(event):
                donors = donor_instance.get_donors_for_parser()
                try:
                    ch = event.message.peer_id.channel_id
                    flag = True
                except:
                    flag = False
                if flag:
                    if int(f'-100{event.message.peer_id.channel_id}') in [int(donor) for donor in donors]:
                        try:
                            donor_id = int(f'-100{event.message.peer_id.channel_id}')
                            if event.message.entities:
                                message_text = format_message(event.message)#event.message.message
                            else:
                                message_text = event.message.message
                            inline_markup = types.InlineKeyboardMarkup(row_width=2)
                            inline_markup.add(types.InlineKeyboardButton(text = '‚úÖ–ü—Ä–∏–Ω—è—Ç—å', callback_data=f"first_confirm_{donor_id}"),
                                    types.InlineKeyboardButton(text = '‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"first_refuse_{donor_id}"))
                            inline_markup.add(types.InlineKeyboardButton(text = '‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"first_edit_{donor_id}"))
                            donor_name, channelels = channel_instance.get_name(donor_id)
                            str_channelels = ', @'.join(channelels)

                            if event.message.photo or event.message.video:
                                count = 774
                            else:
                                count = 3840
                            while True:
                                if len(message_text)>count:
                                    message_text = long_message(message_text, count)
                                    print(len(message_text))
                                else:
                                    break
                            message_text = (
                                    f'<b>ü•≥ –í—ã—à–µ–ª –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ªe: </><code>{donor_name}</>\n\n'
                                    f'{message_text}\n\n'
                                    f'<b>–ö –¥–∞–Ω–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É(<code>{donor_name}</>) –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–π(—ã–µ) –∫–∞–Ω–∞–ª(—ã): @{str_channelels}</>'
                                    )
                            chat_ids = channel_instance.get_chat_id(donor_id)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞)
                            if event.message.grouped_id:
                                grouped_id = event.message.grouped_id

                                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–æ–º—É grouped_id
                                media_messages = await client.get_messages(event.chat_id, min_id=event.message.id - 10, max_id=event.message.id + 10)

                                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ, –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                                media_messages = sorted([msg for msg in media_messages if msg.grouped_id == grouped_id], key=lambda m: m.id)
                                media_files = []

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞)
                                if event.message.grouped_id:
                                    grouped_id = event.message.grouped_id

                                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–æ–º—É grouped_id
                                    media_messages = await client.get_messages(event.chat_id, min_id=event.message.id - 10, max_id=event.message.id + 10)

                                    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ, –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                                    media_messages = sorted([msg for msg in media_messages if msg.grouped_id == grouped_id], key=lambda m: m.id)
                                    media_files = []

                                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã (–ø–æ id), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                                    if media_messages[0].id == event.message.id:
                                        for media_message in media_messages:
                                            caption = media_message.message  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –º–µ–¥–∏–∞
                                            if caption!='':
                                                if media_message.entities:
                                                    message_text = format_message(media_message)
                                                else:
                                                    message_text = caption

                                            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
                                            if media_message.photo:
                                                file = await client.download_file(media_message.photo)
                                                media_files.append(types.InputMediaPhoto(file))

                                            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
                                            elif media_message.video:
                                                file = await client.download_file(media_message.video)
                                                media_files.append(types.InputMediaVideo(file))

                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                                        if media_files:
                                            media_group_instance.save_media_group(grouped_id, event.chat_id, event.message.id, media_files)
                                            for chat_id in chat_ids:
                                                bot.send_media_group(chat_id=chat_id, media=media_files)

                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message_text –Ω–µ –ø—É—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                                        if message_text.strip():  # –ï—Å–ª–∏ message_text –Ω–µ –ø—É—Å—Ç–æ–π
                                            inline_markup = types.InlineKeyboardMarkup(row_width=2)
                                            inline_markup.add(types.InlineKeyboardButton(text = '‚úÖ–ü—Ä–∏–Ω—è—Ç—å', callback_data=f"first_confirm_{donor_id}_media{grouped_id}"),
                                                    types.InlineKeyboardButton(text = '‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f"first_refuse_{donor_id}_media{grouped_id}"))
                                            inline_markup.add(types.InlineKeyboardButton(text = '‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"first_edit_{donor_id}_media{grouped_id}"))
                                            while True:
                                                if len(message_text)>774:
                                                    message_text = long_message(message_text, 774)
                                                else:
                                                    break
                                            message_text = (
                                                    f'<b>ü•≥ –í—ã—à–µ–ª –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ªe: </><code>{donor_name}</>\n\n'
                                                    f'{message_text}\n\n'
                                                    f'<b>–ö –¥–∞–Ω–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É(<code>{donor_name}</>) –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–π(—ã–µ) –∫–∞–Ω–∞–ª(—ã): @{str_channelels}</>'
                                                    )
                                            for chat_id in chat_ids:

                                                bot.send_message(chat_id=chat_id,
                                                                 text=message_text,
                                                                 reply_markup=inline_markup,
                                                                 parse_mode='HTML')
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
                            elif event.message.photo:
                                largest_photo = event.message.photo
                                file = await client.download_file(largest_photo)
                                for chat_id in chat_ids:
                                    if donor_instance.get_limit(chat_id, donor_id):
                                        bot.send_photo(chat_id=chat_id,
                                                       photo=file,
                                                       caption=message_text,
                                                       reply_markup=inline_markup,
                                                       parse_mode='HTML')

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
                            elif event.message.video:
                                video = event.message.video
                                file = await client.download_file(video)
                                for chat_id in chat_ids:
                                    if donor_instance.get_limit(chat_id, donor_id):
                                        bot.send_video(chat_id=chat_id,
                                                       video=file,
                                                       caption=message_text,
                                                       reply_markup=inline_markup,
                                                       parse_mode='HTML')
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                for chat_id in chat_ids:
                                    if donor_instance.get_limit(chat_id, donor_id):
                                        bot.send_message(chat_id,
                                                         message_text,
                                                         reply_markup=inline_markup,
                                                         parse_mode='HTML')



                        except Exception as e:
                            print(traceback.format_exc())

            await client.run_until_disconnected()
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

    except errors.SessionPasswordNeededError:
        print("–°–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    except errors.PhoneCodeInvalidError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    except Exception as e:
        print(f"–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
if __name__ == '__main__':
    client.loop.run_until_complete(main())
